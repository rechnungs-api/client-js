// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { CreateDocumentData, CreateDocumentResponse, ReadDocumentData, ReadDocumentResponse, ListLedgersData, ListLedgersResponse, CreateLedgerData, CreateLedgerResponse, DeleteLedgerData, DeleteLedgerResponse, ListLedgerAccountsData, ListLedgerAccountsResponse, CreateLedgerAccountData, CreateLedgerAccountResponse, ListLedgerTransactionsData, ListLedgerTransactionsResponse, CreateLedgerTransactionData, CreateLedgerTransactionResponse, ListLedgerBalancesData, ListLedgerBalancesResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Create a document
 * Generate a new invoice, credit note, purchase order or other document type.
 */
export const createDocument = <ThrowOnError extends boolean = false>(options: Options<CreateDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateDocumentResponse, unknown, ThrowOnError>({
        url: '/api/v1/documents',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve a document
 * Loads the document as a machine readable JSON object, or downloads the document file (PDF or XML).
 */
export const readDocument = <ThrowOnError extends boolean = false>(options: Options<ReadDocumentData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ReadDocumentResponse, unknown, ThrowOnError>({
        url: '/api/v1/documents/{documentId}',
        ...options
    });
};

/**
 * List ledgers
 * Lists all ledgers.
 */
export const listLedgers = <ThrowOnError extends boolean = false>(options: Options<ListLedgersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLedgersResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers',
        ...options
    });
};

/**
 * Create a ledger
 * Creates a new ledger. This can be used to implement automated double-entry bookkeeping into your application.
 */
export const createLedger = <ThrowOnError extends boolean = false>(options: Options<CreateLedgerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLedgerResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete a ledger
 * Deletes a given ledger together with all associated accounts and transactions. This cannot be undone.
 */
export const deleteLedger = <ThrowOnError extends boolean = false>(options: Options<DeleteLedgerData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteLedgerResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers/{ledgerId}',
        ...options
    });
};

/**
 * List accounts
 * Lists all accounts on a given ledger.
 */
export const listLedgerAccounts = <ThrowOnError extends boolean = false>(options: Options<ListLedgerAccountsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLedgerAccountsResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers/{ledgerId}/accounts',
        ...options
    });
};

/**
 * Create an account
 * Creates a new account on a given ledger. Each transaction on the ledger has exactly one debit and one credit account. German companies may want to use a scheme such as DATEV's SKR04. Note: Once an account has been created it can no longer be deleted.
 */
export const createLedgerAccount = <ThrowOnError extends boolean = false>(options: Options<CreateLedgerAccountData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLedgerAccountResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers/{ledgerId}/accounts',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List transactions
 * Lists transactions on a given ledger.
 */
export const listLedgerTransactions = <ThrowOnError extends boolean = false>(options: Options<ListLedgerTransactionsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLedgerTransactionsResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers/{ledgerId}/transactions',
        ...options
    });
};

/**
 * Create a transaction
 * Creates a new transaction on a given ledger. Once a transaction has been created it can no longer be deleted.
 */
export const createLedgerTransaction = <ThrowOnError extends boolean = false>(options: Options<CreateLedgerTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateLedgerTransactionResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers/{ledgerId}/transactions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * List balances
 * Lists balances of the accounts on a given ledger when taking into account transactions of a given time period. Accounts with balances of zero are not included in the result.
 */
export const listLedgerBalances = <ThrowOnError extends boolean = false>(options: Options<ListLedgerBalancesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListLedgerBalancesResponse, unknown, ThrowOnError>({
        url: '/api/v1/ledgers/{ledgerId}/balances',
        ...options
    });
};